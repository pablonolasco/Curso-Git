Comando
cuando se colocan un dash - es porque se coloca una letra cuando es -- es una letra
//version del git
 git --version
 //ayuda git
 git help
// ayuda del comando commit
 git help commit
//Configurar git; con esta configuracion al subir los cambios se colocara mis datos, de esta manera se sabra quien subio los cambios desde mi maquina
git user.name "Pablo"
git user.email "pablo.nolasco@live.com.mx"
//abrir archivo de configuracion; presionar qw para salir del archivo :wq
git config --global -e
//abrir archivo de configuracion y muestra lo alias; presionar qw para salir del archivo :wq
git config --global -e -l
//Pagina para descargar demo
http://www.initializr.com/

//Inicializar git o repositorio
git init
// mostrar todos los archivos de la carpeta; debe aparecer .git despues del comando git init
ls -al

// Comando para observar el satus de los archivos, se muestra en rojo porque no se ha indicado que los archivos pertencen a un lugar; si muestra en verde es que se registraron los archivos
git status

/****Comandos git add***************/

//Comando para indicar que todos los archivos para que este pendiente de los cambios
//Es un lugar donde podemos confirmar los archivos y carpetas que conformarÃ¡n el commit
//Agrega todos los archivos stage o el escenario
git add .

//Agrega solo un archivo que indiquemos
git add index.html

//Agrega todo los archivos con extension .png
$ git add *.png

//Agrega la carpeta css/ y su contenido
$ git add css/

//Agrega todos los archivos pendientes
$ git add -A
//Agrega todos los txt del TODO el proyecto que hemos modificado
git add "*.txt"
//Agrega todos los archivos, muy similar al comando git add -A
git add --all

//Agrega todos los PDFs dentro de la carpeta PDFs
git add pdfs/*.pdf

//Descartar archivos antes de hacer commit 
git reset index.html
git reset *.png
git reset css/
git reset README.md

//comando para mostrar los archivos y las lineas en donde se modificaron
git diff

//Muestra todos los archivos modificados que se agregaron al stage 
git diff --staged

//Regresar el archivo como estaba antes de agregarlo al stage, regresar al contenido inicial, colocar mayusculas y minusculas
git checkout README.md


/****Comandos git commit***************/

//Commit
git commit -m Primer comit
//Regresar al ultimo commit
git checkout -- .
// Agrega al stage y genera el commit
git commit -am "mensaje"
// modificar el ultimo mensaje del commit
git commit --amend -m "actualizar el ultimo mensaje"

//HEAD apunta al ultimo commit
git reset --soft HEAD^ ,apunta al ultimo commit con ese simbolo, y al ejecutar ese comando aparece ambas M en verde y rojo, para agregar los archivos faltantes
//comando para regresar a un commit en especifico
git reset had 920d8a1, numero del commit te regresa ahi
/****Comandos git log***************/
// Muestra los commit en forma de cronologia de abajo hacia arriba, el ultimo commit viene en en la cabecera HEAD->Master
git log
//Muestra informacion en una sola linea
$ git log --oneline

//Muestra la informacion con decoraciones y mas elegante, all toda la informacion, decorate & graph agrega * a los commit
$ git log --oneline --decorate --all --graph
//Muestra los archivos que no se han agregado en el stache cuando sale la letra en rojo, cuando se han agregado la letra es color verde
$ git status -s
//Saber en que rama estamos
$ git status -s -b

/****Comandos git alias***************/
//Alias para mostrar los commits que se han hecho
$ git config --global alias.lg "log --oneline --decorate --all --graph"
//Alias para saber el status de los archivos
$ git config --global alias.s "status -s -b"

